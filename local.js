// Generated by CoffeeScript 1.10.0
(function() {
  var Encryptor, KEY, LOCAL_ADDRESS, METHOD, PORT, REMOTE_PORT, SERVER, config, configContent, configFromArgs, fs, getServer, http, inetNtoa, k, net, options, parseArgs, path, server, timeout, v;

  net = require("net");

  http = require("http");

  fs = require("fs");

  path = require("path");

  parseArgs = require("minimist");

  Encryptor = require("./encrypt").Encryptor;

  options = {
    alias: {
      'b': 'local_address',
      'l': 'local_port',
      's': 'server',
      'r': 'remote_port',
      'k': 'password',
      'c': 'config_file',
      'm': 'method'
    },
    string: ['local_address', 'server', 'password', 'config_file', 'method'],
    "default": {
      'local_address': '127.0.0.1',
      'local_port': 1080,
      'remote_port': 80,
      'config_file': path.resolve(__dirname, "config.json")
    }
  };

  inetNtoa = function(buf) {
    return buf[0] + "." + buf[1] + "." + buf[2] + "." + buf[3];
  };

  configFromArgs = parseArgs(process.argv.slice(2), options);

  configContent = fs.readFileSync(configFromArgs.config_file);

  config = JSON.parse(configContent);

  for (k in configFromArgs) {
    v = configFromArgs[k];
    config[k] = v;
  }

  SERVER = config.server;

  REMOTE_PORT = config.remote_port;

  LOCAL_ADDRESS = config.local_address;

  PORT = config.local_port;

  KEY = config.password;

  METHOD = config.method;

  timeout = Math.floor(config.timeout * 1000);

  getServer = function() {
    if (SERVER instanceof Array) {
      return SERVER[Math.floor(Math.random() * SERVER.length)];
    } else {
      return SERVER;
    }
  };

  server = net.createServer(function(connection) {
    var aServer, addrLen, addrToSend, cachedPieces, encryptor, headerLength, remote, remoteAddr, remotePort, req, stage;
    console.log("local connected");
    server.getConnections(function(err, count) {
      console.log("concurrent connections:", count);
    });
    encryptor = new Encryptor(KEY, METHOD);
    stage = 0;
    headerLength = 0;
    remote = null;
    req = null;
    cachedPieces = [];
    addrLen = 0;
    remoteAddr = null;
    remotePort = null;
    addrToSend = "";
    aServer = getServer();
    connection.on("data", function(data) {
      var addrtype, buf, cmd, e, error, reply, tempBuf;
      if (stage === 5) {
        data = encryptor.encrypt(data);
        if (!remote.write(data)) {
          connection.pause();
        }
        return;
      }
      if (stage === 0) {
        tempBuf = new Buffer(2);
        tempBuf.write("\u0005\u0000", 0);
        connection.write(tempBuf);
        stage = 1;
        return;
      }
      if (stage === 1) {
        try {
          cmd = data[1];
          addrtype = data[3];
          if (cmd !== 1) {
            console.log("unsupported cmd:", cmd);
            reply = new Buffer("\u0005\u0007\u0000\u0001", "binary");
            connection.end(reply);
            return;
          }
          if (addrtype === 3) {
            addrLen = data[4];
          } else if (addrtype !== 1) {
            console.log("unsupported addrtype:", addrtype);
            connection.end();
            return;
          }
          addrToSend = data.slice(3, 4).toString("binary");
          if (addrtype === 1) {
            remoteAddr = inetNtoa(data.slice(4, 8));
            addrToSend += data.slice(4, 10).toString("binary");
            remotePort = data.readUInt16BE(8);
            headerLength = 10;
          } else {
            remoteAddr = data.slice(5, 5 + addrLen).toString("binary");
            addrToSend += data.slice(4, 5 + addrLen + 2).toString("binary");
            remotePort = data.readUInt16BE(5 + addrLen);
            headerLength = 5 + addrLen + 2;
          }
          buf = new Buffer(10);
          buf.write("\u0005\u0000\u0000\u0001", 0, 4, "binary");
          buf.write("\u0000\u0000\u0000\u0000", 4, 4, "binary");
          buf.writeInt16BE(remotePort, 8);
          connection.write(buf);
          req = http.request({
            host: aServer,
            port: REMOTE_PORT,
            headers: {
              'Connection': 'Upgrade',
              'Upgrade': 'websocket'
            }
          });
          req.setNoDelay(true);
          req.end();
          req.setTimeout(timeout, function() {
            req.abort();
            return connection.end();
          });
          req.on('error', function(e) {
            console.warn("req " + e);
            req.abort();
            return connection.end();
          });
          req.on('upgrade', function(res, conn, upgradeHead) {
            var addrToSendBuf, i, piece;
            remote = conn;
            console.log("remote got upgrade");
            console.log("connecting " + remoteAddr + " via " + aServer);
            addrToSendBuf = new Buffer(addrToSend, "binary");
            addrToSendBuf = encryptor.encrypt(addrToSendBuf);
            remote.write(addrToSendBuf);
            i = 0;
            while (i < cachedPieces.length) {
              piece = cachedPieces[i];
              piece = encryptor.encrypt(piece);
              remote.write(piece);
              i++;
            }
            cachedPieces = null;
            stage = 5;
            remote.on("data", function(data) {
              data = encryptor.decrypt(data);
              if (!connection.write(data)) {
                return remote.pause();
              }
            });
            remote.on("end", function() {
              console.log("remote disconnected");
              connection.end();
              return server.getConnections(function(err, count) {
                console.log("concurrent connections:", count);
              });
            });
            remote.on("error", function(e) {
              console.log("remote " + remoteAddr + ":" + remotePort + " error: " + e);
              if (stage === 4) {
                connection.destroy();
                return;
              }
              connection.end();
              return server.getConnections(function(err, count) {
                console.log("concurrent connections:", count);
              });
            });
            remote.on("drain", function() {
              return connection.resume();
            });
            return remote.setTimeout(timeout, function() {
              connection.end();
              return remote.destroy();
            });
          });
          if (data.length > headerLength) {
            buf = new Buffer(data.length - headerLength);
            data.copy(buf, 0, headerLength);
            cachedPieces.push(buf);
            buf = null;
          }
          return stage = 4;
        } catch (error) {
          e = error;
          console.log(e);
          connection.destroy();
          if (remote) {
            return remote.destroy();
          }
        }
      } else {
        if (stage === 4) {
          return cachedPieces.push(data);
        }
      }
    });
    connection.on("end", function() {
      if (remote) {
        remote.destroy();
      }
      return server.getConnections(function(err, count) {
        console.log("concurrent connections:", count);
      });
    });
    connection.on("error", function(e) {
      console.log("local error: " + e);
      if (req) {
        req.abort();
      }
      if (remote) {
        remote.destroy();
      }
      return server.getConnections(function(err, count) {
        console.log("concurrent connections:", count);
      });
    });
    connection.on("drain", function() {
      if (remote && stage === 5) {
        return remote.resume();
      }
    });
    return connection.setTimeout(timeout, function() {
      if (req) {
        req.abort();
      }
      if (remote) {
        remote.destroy();
      }
      return connection.destroy();
    });
  });

  server.listen(PORT, LOCAL_ADDRESS, function() {
    var address;
    address = server.address();
    return console.log("server listening at", address);
  });

  server.on("error", function(e) {
    if (e.code === "EADDRINUSE") {
      console.log("Address in use, aborting");
    }
    return process.exit(1);
  });

}).call(this);
